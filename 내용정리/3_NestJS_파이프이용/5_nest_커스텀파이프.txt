현재까지의 로직의 문제점은 게시물의 상태를 업데이트할 때 PUBLIC 또는 PRIVATE 로만
변경할 수 있는 것이 아닌 사용자가 입력한 값 그대로 업데이트를 한다는 것이다.


이럴 때는 커스텀 파이프를 이용해주면 쉽다.
'pipes' 라는 이름의 디렉토리를 모듈 디렉토리에 생성해주고 커스텀 파이프를 아래와 같이 생성해주었다.
```
    // board-status-validation.pipe.ts
    export class BaordStatusValidationPipe implements PipeTransform {
        readonly StatusOptions = [BoardStatus.PRIVATE, BoardStatus.PUBLIC];

        private isStatusValue(status: any) {
            const index = this.StatusOptions.indexOf(status);
            return index !== -1;
        }

        transform(value: any, metadata: ArgumentMetadata) {
            value = value.toUpperCase();

            if (!this.isStatusValue(value)) {
            throw new BadRequestException(
                `${BoardStatus.PRIVATE} 또는 ${BoardStatus.PUBLIC} 으로만 변경가능합니다.`,
            );
            }

            return value;
        }
    }
```
PipeTransform 이라는 인터페이스를 상속받아서 자신만의 커스텀 파이프를 만들 수 있다.
transform() 의 매개변수들 중 value 는 사용자로부터 넘겨받은 값을 말하고 metadata 는
인자에 대한 metadata 를 말한다.
ex) 사용자가 { "status": "private" } 를 넘겨줬을 경우
    value 는 private 가 되는 것이고
    metadata 는 { type: "body", data: "status", metatype [Function: String] } 이런 식이다.

파이프를 적용시켜주기 위해서는 해당 파이프가 필요한 컨트롤러에 추가해주면 된다.
그래서 아래와 같이 추가해주었다.
```
    // boards.controller.ts
      @Patch(':id')
    updateBoardStatus(
        @Param('id') id: string,
        @Body('status', BaordStatusValidationPipe) status: BoardStatus,
    ) {
        return this.boardsService.updateBoardStatus(id, status);
    }
```
이번에는 Parameter-level 에서 파이프를 사용해보았다.