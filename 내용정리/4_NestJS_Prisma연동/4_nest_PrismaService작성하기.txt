이것만 세팅이 된다면 이제 진짜로 prisma 로 CRUD 작업을 할 수 있다...


(1) 일단 src 디렉토리에 prisma 모듈을 생성한다.

    ```
        nest g mo prisma
    ```

(2) prisma service 작성을 위한 service 를 생성해준다.

    ```
        nest g service prisma --no-spec
    ```

(3) PrismaService 를 아래와 같이 작성한다.

    ```
        // prisma.service.ts
        import { INestApplication, Injectable, OnModuleInit } from '@nestjs/common';
        import { PrismaClient } from '@prisma/client';

        @Injectable()
        export class PrismaService extends PrismaClient implements OnModuleInit {
            async onModuleInit() {
                await this.$connect();
            }
            async enableShutDownHooks(app: INestApplication) {
                this.$on('beforeExit', async () => {
                await app.close();
                });
            }
        }
    ```
    onModuleInit 과 enableShutDownHooks 는 잘 실행하고 잘 종료하기 위해 작성하는 정도로만 알고 있다...

(4) PrismaModule 을 아래와 같이 수정한다.

    ```
        // prisma.module.ts
        @Module({
            providers: [PrismaService],
            exports: [PrismaService],
        })
        export class PrismaModule {}
    ```
    PrismaService 는 어디에서든지 주입하여 사용해야 하는 ORM 모듈이기 때문에 반드시 exports 에 적용해준다.

(5) 마지막으로 main.ts 를 아래와 같이 수정해준다.

    ```
        // main.ts
        async function bootstrap() {
            const app = await NestFactory.create(AppModule);
            const prismaService = app.get(PrismaService);
            await prismaService.enableShutDownHooks(app);
            await app.listen(3000);
        }
        bootstrap();
    ```
    enableShutDownHooks 를 작성해준다.


이제 Prisma 를 사용하기 위한 준비가 모두 끝났다!
CRUD 작업이 필요한 곳에 PrismaService 를 주입받아 작업을 해주면 된다!