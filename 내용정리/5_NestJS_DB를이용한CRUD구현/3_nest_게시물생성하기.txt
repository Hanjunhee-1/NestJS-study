※  CreateBoardDto 는 그대로 사용하는데 transformer 혹은 validation 을 하기 위해
    Global-level 의 pipe 를 이용하기로 했다.


이번에는 createBoard() 를 작성해볼 것이다.
아래와 같이 작성해주었다.
    ```
        // boards.service.ts
        async createBoard(createBoardDto: CreateBoardDto) {
            const { title, description } = createBoardDto;

            const board = await this.prisma.board.create({
                data: {
                    title,
                    description,
                },
            });
            return board;


            // 추가 - 이런 방식도 있는데 return 값이 원하는대로(API 문서대로) 나오지 않을 듯...
            // const board: Prisma.BoardUncheckedCreateInput = {
            //   title,
            //   description,
            // };

            // // await this.prisma.board.create({ data: board });
            // return board;
        }
    ```
    보통 API 문서를 작성하고 그에 맞는 반환값을 프론트엔드로 보내주어야 한다. 특히 create 같은 경우에는
    사용자에게 값을 받고 그 값을 DB 에 저장한 다음 DB 에 어떻게 저장되었는지에 대한 형식을 보내주는데
    보통은 테이블의 모든 컬럼에 대해서 보내준다. 

    지금 진행하는 것으로는 id, title, description, status 를 모두 프론트엔드로 보내주어야 한다는 것이다.

    하지만 '추가' 라고 되어있는 부분의 아래의 코드들은 오직 title, description 에 대해서만 값을 반환해주고 있다.
    그럼 id 하고 status 는 제대로 저장되지 않은건가? --> 그건 아니다.
    이미 DB 에 id 는 autoincrement 로 되어있고 status 는 PUBLIC 이라는 default 값을 가지고 있다.
    즉, 저장은 제대로 되지만 프론트엔드에 id 하고 status 에 대한 값은 어떻게 보내줄 수가 없다는 것이다. 
    해당 부분은 개인적으로 프로젝트를 할 때는 크게 중요하지 않지만 협업에서는 API 문서가 백엔드와 프론트엔드 간의
    일종의 '약속' 이기 때문에 중요하게 다룰 필요가 있다.

    일단 나의 경우에는 API 문서를 작성하지 않았지만 id 하고 status 에 대한 결과값도 보고 싶어서
    board 라는 변수에 값을 저장하며 DB 에도 저장할 수 있도록 코드를 작성했다.


    ```
        // boards.controller.ts
        @Post()
        async createBoard(@Body() createBoardDto: CreateBoardDto) {
            const board = await this.boardsService.createBoard(createBoardDto);
            return board;
        }
    ```
    controller 는 바뀐 것이 없다. 중요한 것이라면 @UsePipes() 를 안 쓰게 되었다는 것.
    해당 부분은 맨 위에 설명되어있다.