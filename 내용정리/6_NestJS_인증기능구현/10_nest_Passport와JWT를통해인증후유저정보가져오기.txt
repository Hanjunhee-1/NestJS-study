사용자가 로그인 했을 때 해당 사용자에 대한 정보를 JWT 토큰으로 발급해주었다면
이제는 해당 토큰으로 인증을 받을 수 있는 방법이 필요하다!

그래서 이번에는 Passport 와 JWT 를 통해 인증을 받는 것을 해볼것이다!


우선 필요한 패키지를 설치한다.
```
    npm i @types/passport-jwt
```
해당 패키지는 타입을 정의하기 위해 필요한 모듈이다.


그리고 /auth 디렉토리에 jwt.strategy.ts 파일을 아래와 같이 작성해주었다.
```
    // jwt.strategy.ts
    import { Injectable, UnauthorizedException } from '@nestjs/common';
    import { PassportStrategy } from '@nestjs/passport';
    import { User } from '@prisma/client';
    import { ExtractJwt, Strategy } from 'passport-jwt';
    import { PrismaService } from 'src/prisma/prisma.service';

    @Injectable()
    export class JwtStrategy extends PassportStrategy(Strategy) {
        constructor(private readonly prisma: PrismaService) {
            super({
                secretOrKey: process.env.SECRET_KEY,
                jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
            });
        }
        async validate(payload) {
            const { name } = payload;
            const user: User = await this.prisma.user.findUnique({
                where: {
                    name,
                },
            });

            if (!user) {
                throw new UnauthorizedException();
            }

            return user;
        }
    }
```
우선 NestJS 에서 인증을 할 때 많이 쓰이는 PassportStrategy 를 상속받는다.
매개변수로는 Strategy 라는 것을 넘겨주는데 이것은 passport-jwt 의 것으로 
JWT 토큰을 사용한다는 것이다. 이것을 위해 @types/passport-jwt 를 설치한 것이다.

JWT 토큰을 발급해줄 때 payload 에 사용자의 이름과 id 값을 넘겨줬었다. 그렇다는 말은 
사용자가 해당 JWT 토큰을 서버로 넘겨주었을 때 서버에서 payload 에 있는 name 값을 통해
DB 에서 사용자를 찾아내야 한다는 것이다. 때문에 PrismaService 를 주입받았다. 

이번에는 PrismaService 만 주입받는 것이 아닌 super() 가 사용되었다. super() 의 매개변수로는
{ secretOrKey: process.env.SECRET_KEY, jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken() } 을 넘겨주었다.
secretOrKey 는 서버에서 토큰의 signature 를 verify 해주기 위해 사용했던 SECRET_KEY 를 넣어준다.
jwtFromRequest 는 사용자가 어떠한 토큰 인증방식으로 요청했는지를 알기 위해 필요한데 BearerToken 으로 요청을 받을 것이다.
※  BearerToken 은 토큰 유형의 한 종류로써 일단은 JWT 가 BearerToken 에 해당한다는 것을 기억해두자.

그다음으로는 토큰을 인증해주기 위한 validate() 이라는 함수를 작성해주었다.
payload 에서 name 값을 받아와서 저장하고 DB 에서 해당 name 을 갖는 사용자를 검색한 다음
없으면 예외처리를 해주고 있다면 찾은 user 객체를 반환해준다.


이제 JwtStrategy 를 작성했으니 auth.module.ts 를 수정해주면 된다.
```
    // auth.module.ts
    @Module({
        imports: [
            PrismaModule,
            PassportModule.register({ defaultStrategy: 'jwt' }),
            JwtModule.register({
                secret: process.env.SECRET_KEY,
                signOptions: {
                    expiresIn: 60 * 60,
                },
            }),
        ],
        controllers: [AuthController],
        providers: [AuthService, JwtStrategy],
        exports: [JwtStrategy, PassportModule],
    })
    export class AuthModule {}
```
providers 에 JwtStrategy 를 추가하여 auth 모듈에서 서비스로써 사용할 수 있도록 해주었고
JwtStrategy 는 사용자를 인증할 때 뿐만 아니라 게시물 작성, 열람, 수정 등과 같은 작업에서도
인증된 사용자만이 해당 작업을 할 수 있도록 할 때 필요하기 때문에 exports 에도 추가해주었다.
JwtStrategy 는 PassportStrategy 를 상속받는 형태이기 때문에 PassportModule 도 exports 에 추가해주었다.


그리고 controller 에서 다음과 같은 핸들러를 통해 테스트 해보았다.
```
    // auth.controller.ts
    import { AuthGuard } from '@nestjs/passport';
    ...

    @Post('/test')
    @UseGuards(AuthGuard())
    test(@Req() req) {
        console.log(req.user);
    }
```
@UseGuards(AuthGuard()) 를 추가해주어야만 Passport 중에서 JWT 를 통해 인증을 해줄 수 있다.


※  JWT 를 다루는 내용이 상당히 복잡하고 어렵다보니 자주자주 봐야할 것 같다. 