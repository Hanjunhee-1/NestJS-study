저번 '10_nest_Passport와JWT를통해인증후유저정보가져오기' 를 보면 Controller 에서 
/test 경로를 통해 인증된 JWT 토큰으로 request 에 포함된 user 의 정보를 알수 있었다.


그 때 사용한 데코레이터는 @Req() 로 사용자의 요청정보가 모두 담긴 request 를 받을 수 있는
데코레이터였다. 하지만 서버에서 사용하는 것은 오직 request 에 포함된 user 의 정보이기 때문에
걸러주는 작업이 필요하다.

※  그냥 req.user 이런 식으로 해주면 안되나...?
    뭐 크게 상관은 없을 것 같긴하다. 하지만 타입 명시를 해주는 것이 어렵고
    실제 코드를 작성한 사람이 아닌 다른 사람이 보면 '이게 뭐지?' 라고 생각할 수도 있다.
    뿐만 아니라 제일 중요한 것이 있는데 "@Req() 는 멋이 없다"


이러한 이유들 때문에 이번에는 커스텀 데코레이터를 따로 만들어볼 것이다.
/auth 디렉토리에 decorators 라는 디렉토리를 생성하고 get-user.decorator.ts 파일을 아래와 같이 작성했다.
```
    // get-user.decorator.ts
    import { createParamDecorator, ExecutionContext } from '@nestjs/common';
    import { User } from '@prisma/client';

    export const GetUser = createParamDecorator((ctx: ExecutionContext): User => {
        const req = ctx.switchToHttp().getRequest();
        return req.user;
    });
```
데코레이터 이름은 GetUser 로 나중에 controller 에서 @GetUser() 이런 식으로 사용할 것이다.
커스텀 데코레이터를 생성하기 위해 createParamDecorator() 라는 함수를 사용한다.
매개변수로는 arrow 함수를 넘겨준다. arrow 함수의 매개변수로는 ctx 라는 것이 있는데 해당 변수의 타입은
ExecutionContext 이다. 간단히 말하자면 현재 실행되는 프로세스의 추가 세부 정보를 제공해주는 interface 인데
request 뿐만 아니라 response 에 대한 정보도 얻을 수 있다.
※  https://velog.io/@hahaha/NestJS-Execution-context
    자세한 것은 위의 링크를 참고하자.

arrow 함수의 반환 타입은 작성했던 model 중에 User 이다. 안에 내용은 크게 어려운 것이 없다.
req 라는 변수에 사용자의 요청 정보를 담고 해당 요청 정보 중에서 user 에 접근하여 req.user 를 반환해준다.


그리고 이제 controller 를 다음과 같이 수정해주었다.
```
    // auth.controller.ts
    @Post('/test')
    @UseGuards(AuthGuard())
    test(@GetUser() user: User) {
        console.log(user);
    }
```
바뀐 것은 매개변수에서 커스텀 데코레이터인 @GetUser() 를 사용한다는 것이다.
이제 controller 에서 따로 @Req() 로 받아서 user 에 접근할 필요 없이 커스텀 데코레이터를 통해 
사용자에 대한 정보를 다룰 수 있다. 