/6_NestJS_인증기능구현/1_nest_인증기능구현준비.txt 에서 User 모델을 처음으로 생성했었다.
User 모델을 생성하면서 맨 마지막에 'User 와 Board 의 관계는 나중에 설정할 것이다' 라고 적었는데
이제 User 모델과 Board 모델의 관계를 설정해줄 것이다.


이 부분은 데이터베이스를 배웠다면 어려움이 없을 거라고 생각한다.

관계에는 4가지가 있다.
    
    (1) 1:1
        테이블 간의 관계에서 오직 한 row 끼리만 참조관계가 형성될 수 있는것이다.
        예를 들어 user 테이블과 profile 테이블이 있다고 하면
        사용자는 "오직 자신만의" profile 을 가진다. A 사용자와 B 사용자가 있을 때 
        A 사용자는 A profile 만 가져야지 A 와 B 모두의 profile 은 가질 수 없다.

    (2) 1:N
        테이블 간의 관계에서 한 row 가 다른 테이블의 여러 row 를 가질 수 있는 있는 것이다.
        예를 들어 user 테이블과 board 테이블이 있다고 하면
        사용자는 여러 개의 게시물을 작성할 수 있으므로 이는 1(사용자):N(게시물) 의 관계이다.
        A 사용자는 1번 게시물, 2번 게시물, 3번 게시물, ..., N번 게시물까지 자신이 작성한 것이라면
        몇 개든지 가질 수 있는 것이다.
    
    (3) M:1
        (2) 의 경우와 같은데 관점이 달라진 것이다. 결국은 똑같다.

    (4) M:N
        테이블의 간의 관계에서 여러 row 가 다른 테이블의 여러 row 와 참조관계를 가지는 형태이다.
        말로 설명하여 예를 들면, "한 명의 학생이 여러 수업을 들을 수 있고, 한 수업은 여러 학생을 수용한다."
        잘 생각해보면 1:N, M:1 이 둘의 관계가 합쳐져서 생긴것이 M:N 관계라는 것을 알 수 있다.
        이 경우에는 다른 경우들과는 다르게 관계를 위한 테이블을 새로 생성하여 M:N 관계를 나타내준다.
        학생과 수업의 관계를 바로 M:N 으로 이어주는 것이 아니라 학생과 수업 사이에 참조 테이블을 만들어서
        M:N 관계를 관리해준다.
        ※  참고링크: https://siyoon210.tistory.com/26


테이블 관계에 대해 설명하면서 나왔다시피 User 모델과 Board 모델의 관계는 1:N 관계이다.
그럼 이제 이것을 schema.prisma 에서 구현해주면 끝이다.
아래와 같이 작성해주었다.
```
    // schema.prisma
    model User {
        id              Int         @id @default(autoincrement())
        name            String      @db.VarChar(255)  @unique
        password        String      @db.VarChar(255)

        boards          Board[]
    }

    model Board {
        id              Int         @id @default(autoincrement())
        title           String      @db.VarChar(255)
        description     String      @db.VarChar(255)
        status          BoardStatus @default(PUBLIC)
        user            User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
        userId          Int?
    }
```
User 모델의 boards 와 Board 모델의 user 는 서로 간의 관계를 나타내주기 위해 작성된 것으로
mysql cli 로 확인했을 때 나타나는 것은 userId 뿐이다.

boards 를 Board[] 타입으로 지정한 이유는 사용자가 하나의 게시물을 가지는 것이 아닌 여러 개의 게시물을 가질 수 있기 때문에
리스트 타입으로 지정해준 것이다. 

실제 관계를 완벽하게 정해주는 곳은 Board 모델의 user 이다.
타입은 User? 타입으로 게시물을 작성한 user 가 있어도 되고 없어도 되는 것이다.

※  실제로는 이러면 안된다! 게시물은 작성자가 무조건 있어야 되는데 onDelete: SetNull 설정 때문에 이렇게 했다.
    onDelete: SetNull 은 만약에 게시물을 작성한 사용자가 탈퇴했을 경우 게시물에 대한 작성자의 정보는 없지만
    게시물 자체의 정보(제목, 내용 등) 는 남겨두기 위해 적용한 것이다. 실제로 게시물을 작성한 사용자의 계정이 사라지면
    게시물이 참조하던 userId 는 null 로 바뀌게 된다. 
    이 null 로 바뀌게 되는것 때문에 user 의 타입을 nullable 하게 만들어주는 '?' 를 추가로 붙여준 것이다.

관계를 설정할 때는 @relation() 을 이용한다. fields 는 실제로 현재 모델이 갖고 있는 필드 중에서 어느 것을 외래키로 사용할 것인지를 나타내고
references 는 참조를 할 모델에서 어느 필드를 참조할지 정하는 것이다. 보통 참조할 필드는 참조할 모델의 Primary Key 를 참조한다.
onDelete 설정은 본인 마음인데 사용자가 탈퇴했을 때 그 사용자가 작성했던 게시물도 없어지게 하려면 onDelete: Cascade 로 설정해줄 수도 있다.
