이번에는 게시물을 생성할 때 사용자 정보를 연결시켜주는 작업을 할 것이다. 

우선 boards.controller.ts 의 createBoard() 를 아래와 같이 수정해주었다.
``` 
    // boards.controller.ts 
    @Post()
    async createBoard(
        @Body() createBoardDto: CreateBoardDto,
        @GetUser() user: User,
    ) {
        const board = await this.boardsService.createBoard(createBoardDto, user);
        return board;
    }
```
@GetUser() 로 인증된 사용자의 정보를 다룰 수 있으니 해당 정보를 service 로직으로 넘긴다.


그리고 boards.service.ts 에서는 다음과 같은 로직으로 수정했다.
```
    // boards.service.ts
    async createBoard(createBoardDto: CreateBoardDto, user: User) {
        const { title, description } = createBoardDto;

        const board: Board = await this.prisma.board.create({
            data: {
                title,
                description,
                user: {
                    connect: {
                        id: user.id,
                    },
                },
            },
            include: {
                user: true,
            },
        });
        return board;
    }
```
이런 식으로 해주었다. 우선 타입 명시를 해주는 것이 좋을 것 같아서 Board 타입으로 명시해주었다.
다른 함수들도 마찬가지로 타입 명시를 해주었다.
그리고 prisma 문법인데 create 과 동시에 이미 존재하는 것을 연결해줄 때는 
schema 에서 @relation() 에 해당하는 필드이름과 connect 옵션을 쓰고
해당 옵션 안에 id 의 값을 JWT 로 인증받은 user 의 id 를 연결해주었다.

좀 더 쉽게 풀어쓰자면 board 테이블과 참조관계인 user 테이블과 연결하는데 연결할 때 user 테이블의 id 가 
JWT 로 인증받은 user 의 id 인 사용자를 연결해주는 것이다.

include 라는 것도 추가했는데 보통 작성자가 누구인지 알려면 userId 가 아니라 해당 userId 를 가지는 user 의 name 값이 필요한 것이기 때문에
include 를 추가해주었다. 어렵게 생각할 것 없이 참조를 하고 있는 row 의 모든 값을 가져오도록 하는 것이라고 생각하면 된다. 

같은 이유로 getBoards(), getBoardById() 에도 검색할 때 include: { user: true, } 를 추가해주었다.

