이번에는 자신의 게시물만 삭제하도록 로직을 작성해볼 것이다.

기존에 deleteBoard() 라는 로직이 있는데 해당 로직은 자신이 작성한 것이 아니어도
게시물의 id 만 알고 있다면 게시물을 삭제할 수 있었다. 자신이 작성한 것을 남이 삭제하는
것은 말이 안되기 때문에 로직을 수정해주었다.

아래와 같이 수정했다.
```
    // boards.controller.ts
    @Delete(':id')
    async deleteBoard(
        @Param('id', ParseIntPipe) id: number,
        @GetUser() user: User,
    ) {
        const result = await this.boardsService.deleteBoard(id, user);
        return result;
    }
```
controller 의 deleteBoard() 에 @GetUser() 데코레이터를 추가하여 인증된 JWT 토큰을 넘긴다.

```
    // boards.service.ts
    async deleteBoard(id: number, user: User) {
        const board: Board = await this.getBoardById(id);

        if (board.userId === user.id) {
            await this.prisma.board.delete({
                where: {
                    id: board.id,
                },
            });
        } else {
            throw new UnauthorizedException('게시물을 삭제할 권한이 없습니다.');
        }

        return 'success';
    }
```
게시물이 존재하는지는 getBoardById() 를 통해 확인하고
만약 존재하면 if-else 문이 실행될 것이다.
만약에 board 가 가지고 있는 userId 의 값이 JWT 를 통해 인증된 user 의 id 값과 
같다면 게시물을 삭제할 수 있도록 해준다. 만약 그렇지 않다면 UnauthorizedException 을 날려준다.

※  프론트엔드를 개발할 수 있다면 '굳이 저게 필요할까?' 라는 생각이 들수도 있다.
    왜냐하면 자신의 게시물이 아닐 때는 '삭제하기' 등과 같은 버튼을 안 보이게 하면 되기 때문이다.
    하지만 모든 사용자가 착한 사용자일리는 없기 때문에 이런 개인의 정보와 관련된 예외처리는 반드시 해주어야한다.