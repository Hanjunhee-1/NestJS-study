이번에는 로그를 사용하는 방법을 알아볼 것이다.

로그의 종류는 다음과 같다.

    (1) Log: 
        중요한 정보를 로깅하는 범용 로그

    (2) Warning: 
        치명적이거나 파괴적이지 않은 처리되지 않은 문제를 로깅

    (3) Error:
        치명적이거나 파괴적인 처리되지 않은 문제를 로깅

    (4) Debug:
        오류 발생시 로직을 디버그하는데 도움이 되는 유용한 정보. 개발자용

    (5) Verbose:
        응용 프로그램에 대한 통찰력을 제공하는 정보. 운영자용


로그 사용방법에 대해 가볍게 알아보려고 한다.
우선 main.ts 에서 bootstrap 될때 어느 호스트의 어떤 포트에서 서버가 실행되고 있는지
알려주는 로거를 작성해볼 것이다.
```
    // main.ts
    import { Logger, ValidationPipe } from '@nestjs/common';
    import { NestFactory } from '@nestjs/core';
    import { AppModule } from './app.module';
    import { PrismaService } from './prisma/prisma.service';

    async function bootstrap() {
        const logger = new Logger('Main');
        const app = await NestFactory.create(AppModule);
        app.useGlobalPipes(new ValidationPipe());
        const prismaService = app.get(PrismaService);
        await prismaService.enableShutDownHooks(app);
        await app.listen(3000);
        logger.log(`Server is running at http://localhost:3000`);
    }
    bootstrap();
```
logger 라는 변수를 통해 Logger 객체를 생성해주었다. 매개변수로 넘겨진 Main 은 해당 로거가 실행될 때 
어디에서 실행됐는지 알려주기 위해 사용했다.
5개의 로그 종류 log, warning, error, debug, verbose 중에 필요한 레벨의 것을 사용하면 된다.


그 다음은 controller 에서도 사용해볼 것이다.
```
    // boards.controller.ts
    @Controller('boards')
    @UseGuards(AuthGuard())
    export class BoardsController {
        private readonly logger = new Logger('BoardsController');
        ...

        @Post()
        async createBoard(
            @Body() createBoardDto: CreateBoardDto,
            @GetUser() user: User,
        ) {
            this.logger.verbose(`${user.name} trying to create new board
            Payload: ${JSON.stringify(createBoardDto)}`);
            const board = await this.boardsService.createBoard(createBoardDto, user);
            return board;
        }

        @Delete(':id')
        async deleteBoard(
            @Param('id', ParseIntPipe) id: number,
            @GetUser() user: User,
        ) {
            this.logger.verbose(`${user.name} trying to delete board has id: ${id}`);
            const result = await this.boardsService.deleteBoard(id, user);
            return result;
        }
    }
```
여기서도 새로운 Logger 객체를 생성하였는데 객체의 이름은 'BoardsController' 즉, 현재 로거가 실행되고 있는 위치를 적어주었다.
이번에는 verbose 를 사용해보았다.
JSON.stringify() 는 JSON 객체 전체를 string 으로 만들어주는 기능을 하고 있다.


※  지금은 복잡하지 않은 수준의 로그를 사용해보았다. 원래는 좀 더 본격적으로 세팅하여 예기치 못한 에러 등을 
    확실하게 로깅할 수 있게 하는 것이 맞다. 
    뿐만 아니라 그냥 Logger 말고도 Winston 이라는 로거 객체를 사용할 수도 있다.
    로거는 개발이 끝났을 때 적용하는 것이 아닌 새로운 service 로직을 작성할 때마다
    적용해주는 것이 맞는 방식이다.